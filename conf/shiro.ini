;;; Instructions for configuring shiro.ini
;;;
;;; 1. Replace <HOST> with the FQDN or IP of the Active Directory server.
;;;
;;; 2. Replace <SERVICE_ACCOUNT> with the name of a service account that can look up AD group membership information.
;;; 2.a. Note: use the newer email style form, such as "user@domain.com", instead of the older "DOMAIN\user".
;;;
;;; 3. Replace <SERVICE_ACCOUNT_PASSWORD> with the password for the service account.
;;;
;;; 4. Replace <SEARCH_BASE> with the DN (distinguished name) of the search base object, meaning the container where
;;;      the users live. Note: this is not used for authentication; it's used instead for the role lookup.
;;; 4.a. Examples: OU=MyContainer,DC=DOMAIN,DC=com or CN=Users,DC=DOMAIN,DC=com
;;;
;;; 5. Replace <GROUP_TO_ROLES_MAPPING> with a key1:value1,key2:value2,... style mapping, where the keys are DNs from
;;;      AD, and the values are names of Shiro roles. WARNING: the keys (DNs) are case sensitive.
;;; 5.a. Note: Valid role names are application specific. In LdapSslExample, #hasRole is looking for "role".
;;; 5.b. Examples: "CN=MyGroup,OU=MyContainer,DC=DOMAIN,DC=com":"ShiroRole" or
;;;      "CN=MyGroup,CN=Users,DC=DOMAIN,DC=com":"ShiroRole"
;;;
;;; 6. If your JRE does not trust the SSL certificate presented by the Active Directory server, then the connection
;;;      will fail with an exception regarding a PKIX path validation failure. To resolve the issue, import the
;;;      CA public key (or the AD server's self-signed public key) into the JRE's cacerts keystore. For example, issue
;;;      the following command line:
;;;          keytool -import -keystore <path/to/jre/lib/security/cacerts> -alias <alias> -file adserver.crt
;;;      Note: The default cacerts password is 'changeit'.

[main]
#contextFactory = org.apache.shiro.realm.ldap.JndiLdapContextFactory
#contextFactory.url = ldap://localhost:389
#contextFactory.systemUsername = cn=Manager,dc=example,dc=com
#contextFactory.systemPassword = secret
#contextFactory.environment[java.naming.security.protocol] = ssl

#realm = org.apache.shiro.realm.ldap.JndiLdapRealm
#realm.contextFactory.url = ldap://localhost:389
#realm.userDnTemplate = uid={0},ou=People,dc=example,dc=com

#contextFactory = org.apache.shiro.realm.ldap.JndiLdapContextFactory
#contextFactory.url = ldap://localhost:389
#contextFactory.systemUsername = cn=Manager,dc=example,dc=com
#contextFactory.systemPassword = secret

contextFactory = org.apache.shiro.realm.ldap.JndiLdapContextFactory
contextFactory.url = ldap://localhost:389
contextFactory.systemUsername = cn=Manager, dc=example, dc=com
contextFactory.systemPassword = secret
#contextFactory.environment[java.naming.security.protocol] = ssl

#realm = org.apache.shiro.realm.activedirectory.ActiveDirectoryRealm
realm = org.sample.FortressLDAPRealm
realm.ldapContextFactory = $contextFactory
realm.searchBase = "ou=People,dc=example,dc=com"
#realm.searchBase = "ou=Roles,ou=RBAC,dc=example,dc=com"
realm.groupRolesMap = "ou=People,dc=example,dc=com":"ftRA"
#realm.groupRolesMap = "ou=RBAC,ou=Roles,dc=example,dc=com":"roleOccupant"
#realm.principalSuffix= "ou=People, dc=example, dc=com"

#realm.userDnTemplate = uid={0},ou=People,dc=example,dc=com

[roles]
# 'admin' role has all permissions, indicated by the wildcard '*'
#admin = *
# The 'schwartz' role can do anything (*) with any lightsaber:
role = foo:*
# The 'goodguy' role is allowed to 'drive' (action) the winnebago (type) with
# license plate 'eagle5' (instance specific id)
role2 = foo:add


